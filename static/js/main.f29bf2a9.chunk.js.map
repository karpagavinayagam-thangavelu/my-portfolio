{"version":3,"sources":["styles/theme.ts","reportWebVitals.ts","serviceWorker.js","index.tsx"],"names":["paletteTheme","createMuiTheme","palette","type","primary","main","secondary","darkPaletteTheme","responsiveFontSizes","contrastText","darkTheme","overrides","MuiIconButton","colorPrimary","border","backgroundColor","color","fill","MuiTypography","theme","root","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","fetch","headers","response","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","App","React","lazy","ReactDOM","render","StrictMode","ThemeProvider","fallback","document","getElementById"],"mappings":"iNAGMA,EAAeC,YAAe,CAChCC,QAAS,CACLC,KAAM,QACNC,QAAS,CACLC,KAAM,WAEVC,UAAW,CACPD,KAAM,cAMLE,EAAmBC,YAAoBP,YAAe,CAC/DC,QAAS,CACLC,KAAM,OACNC,QAAS,CACLC,KAAM,OACNI,aAAc,WAElBH,UAAW,CACPD,KAAM,eAILK,EAAYF,YAAoBP,YAAe,2BACtDM,GADqD,IAEvDI,UAAW,CACPC,cAAe,CACXC,aAAc,CACVC,OAAQ,iBACR,UAAW,CACPC,gBAAkBR,EAAiBL,QAAQE,QAAQC,KACnDW,MAAOT,EAAiBL,QAAQE,QAAQK,aACxCQ,KAAMV,EAAiBL,QAAQE,QAAQK,gBAInDS,cAAe,CACXL,aAAc,CACVG,MAAO,OACPC,KAAM,cAMTE,EAAQX,YAAoBP,YAAe,2BACjDD,GADgD,IAEnDW,UAAW,CACPC,cAAe,CACXQ,KAAM,CACFN,OAAQ,4B,iGCzCTO,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,gBCGRQ,EAAcC,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACpB,2DAIF,SAASC,EAASC,GACrB,GAA6C,kBAAmBC,UAAW,CAGtE,GADkB,IAAIC,IAAIC,GAAwBR,OAAOC,SAASQ,MACpDC,SAAWV,OAAOC,SAASS,OAIpC,OAGLV,OAAOW,iBAAiB,QAAQ,WAC3B,IAAMC,EAAK,UAAMJ,GAAN,sBAEPV,IAgElB,SAAiCc,EAAOP,GAEpCQ,MAAMD,EAAO,CACRE,QAAS,CAAE,iBAAkB,YAE5BtB,MAAK,SAAAuB,GAED,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEhB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5Cb,UAAUc,cAAcC,MAAM7B,MAAK,SAAA8B,GAC9BA,EAAaC,aAAa/B,MAAK,WAC1BQ,OAAOC,SAASuB,eAK1BC,EAAgBb,EAAOP,MAGhCqB,OAAM,WACFC,QAAQC,IACH,oEAvFAC,CAAwBjB,EAAOP,GAI/BC,UAAUc,cAAcC,MAAM7B,MAAK,WAC9BmC,QAAQC,IACH,iHAMVH,EAAgBb,EAAOP,OAM1C,SAASoB,EAAgBb,EAAOP,GAC5BC,UAAUc,cACJhB,SAASQ,GACTpB,MAAK,SAAA8B,GACDA,EAAaQ,cAAgB,WACxB,IAAMC,EAAmBT,EAAaU,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACG,cAA3BF,EAAiBG,QACZ5B,UAAUc,cAAce,YAIvBR,QAAQC,IACH,iHAKDvB,GAAUA,EAAO+B,UAChB/B,EAAO+B,SAASd,KAMrBK,QAAQC,IAAI,sCAGRvB,GAAUA,EAAOgC,WAChBhC,EAAOgC,UAAUf,WAO9CI,OAAM,SAAAY,GACFX,QAAQW,MAAM,4CAA6CA,M,WCxFnEC,EAAMC,IAAMC,MAAK,kBAAM,uDAY7BC,IAASC,OATP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAA,EAAD,CAAe1D,MAAOA,IAAtB,SACA,cAAC,WAAD,CAAU2D,SAAU,wBAApB,SACE,cAACP,EAAD,UAQJQ,SAASC,eAAe,SAM1B3D,EAAgBsC,QAAQC,KAExBmB,SAASpC,iBAAiB,QAAQ,kBAAMS,S","file":"static/js/main.f29bf2a9.chunk.js","sourcesContent":["\r\nimport { createMuiTheme, responsiveFontSizes } from \"@material-ui/core\";\r\n\r\nconst paletteTheme = createMuiTheme({\r\n    palette: {\r\n        type: 'light',\r\n        primary: {\r\n            main: \"#0D6AA8\"\r\n        },\r\n        secondary: {\r\n            main: \"#FFBE00\"\r\n        }\r\n    }\r\n});\r\n\r\n\r\nexport const darkPaletteTheme = responsiveFontSizes(createMuiTheme({\r\n    palette: {\r\n        type: 'dark',\r\n        primary: {\r\n            main: \"#FFF\",\r\n            contrastText: \"#0D6AA8\",\r\n        },\r\n        secondary: {\r\n            main: \"#FFBE00\"\r\n        },  \r\n    },\r\n}));\r\nexport const darkTheme = responsiveFontSizes(createMuiTheme({\r\n   ...darkPaletteTheme,\r\n    overrides: {\r\n        MuiIconButton: {\r\n            colorPrimary: {\r\n                border: \"1px solid #FFF\",\r\n                \"&:hover\": {\r\n                    backgroundColor : darkPaletteTheme.palette.primary.main,\r\n                    color: darkPaletteTheme.palette.primary.contrastText,\r\n                    fill: darkPaletteTheme.palette.primary.contrastText\r\n                },\r\n            }\r\n        },\r\n        MuiTypography: {\r\n            colorPrimary: {\r\n                color: \"#fff\",\r\n                fill: \"#fff\"\r\n            }\r\n        }\r\n    }\r\n}));\r\n\r\nexport const theme = responsiveFontSizes(createMuiTheme({\r\n    ...paletteTheme,\r\n    overrides: {\r\n        MuiIconButton: {\r\n            root: {\r\n                border: \"1px solid #0D6AA8\"\r\n            }\r\n        }\r\n    }\r\n}));","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n         /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n         // The URL constructor is available in all browsers that support SW.\r\n         const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n         if (publicUrl.origin !== window.location.origin) {\r\n              // Our service worker won't work if PUBLIC_URL is on a different origin\r\n              // from what our page is served on. This might happen if a CDN is used to\r\n              // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n              return;\r\n         }\r\n\r\n         window.addEventListener('load', () => {\r\n              const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n              if (isLocalhost) {\r\n                   // This is running on localhost. Let's check if a service worker still exists or not.\r\n                   checkValidServiceWorker(swUrl, config);\r\n\r\n                   // Add some additional logging to localhost, pointing developers to the\r\n                   // service worker/PWA documentation.\r\n                   navigator.serviceWorker.ready.then(() => {\r\n                        console.log(\r\n                             'This web app is being served cache-first by a service ' +\r\n                             'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                        );\r\n                   });\r\n              } else {\r\n                   // Is not localhost. Just register service worker\r\n                   registerValidSW(swUrl, config);\r\n              }\r\n         });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n         .register(swUrl)\r\n         .then(registration => {\r\n              registration.onupdatefound = () => {\r\n                   const installingWorker = registration.installing;\r\n                   if (installingWorker == null) {\r\n                        return;\r\n                   }\r\n                   installingWorker.onstatechange = () => {\r\n                        if (installingWorker.state === 'installed') {\r\n                             if (navigator.serviceWorker.controller) {\r\n                                  // At this point, the updated precached content has been fetched,\r\n                                  // but the previous service worker will still serve the older\r\n                                  // content until all client tabs are closed.\r\n                                  console.log(\r\n                                       'New content is available and will be used when all ' +\r\n                                       'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                                  );\r\n\r\n                                  // Execute callback\r\n                                  if (config && config.onUpdate) {\r\n                                       config.onUpdate(registration);\r\n                                  }\r\n                             } else {\r\n                                  // At this point, everything has been precached.\r\n                                  // It's the perfect time to display a\r\n                                  // \"Content is cached for offline use.\" message.\r\n                                  console.log('Content is cached for offline use.');\r\n\r\n                                  // Execute callback\r\n                                  if (config && config.onSuccess) {\r\n                                       config.onSuccess(registration);\r\n                                  }\r\n                             }\r\n                        }\r\n                   };\r\n              };\r\n         })\r\n         .catch(error => {\r\n              console.error('Error during service worker registration:', error);\r\n         });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n         headers: { 'Service-Worker': 'script' },\r\n    })\r\n         .then(response => {\r\n              // Ensure service worker exists, and that we really are getting a JS file.\r\n              const contentType = response.headers.get('content-type');\r\n              if (\r\n                   response.status === 404 ||\r\n                   (contentType != null && contentType.indexOf('javascript') === -1)\r\n              ) {\r\n                   // No service worker found. Probably a different app. Reload the page.\r\n                   navigator.serviceWorker.ready.then(registration => {\r\n                        registration.unregister().then(() => {\r\n                             window.location.reload();\r\n                        });\r\n                   });\r\n              } else {\r\n                   // Service worker found. Proceed as normal.\r\n                   registerValidSW(swUrl, config);\r\n              }\r\n         })\r\n         .catch(() => {\r\n              console.log(\r\n                   'No internet connection found. App is running in offline mode.'\r\n              );\r\n         });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n         navigator.serviceWorker.ready\r\n              .then(registration => {\r\n                   registration.unregister();\r\n              })\r\n              .catch(error => {\r\n                   console.error(error.message);\r\n              });\r\n    }\r\n}\r\n","import React, { Suspense } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nimport { theme } from './styles/theme';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst App = React.lazy(() => import('./App'));\r\n\r\nconst init = () => (\r\n  <React.StrictMode>\r\n    <ThemeProvider theme={theme}>\r\n    <Suspense fallback={<div></div>}>\r\n      <App/>\r\n      </Suspense>\r\n    </ThemeProvider>\r\n  </React.StrictMode>\r\n);\r\n\r\nReactDOM.render(\r\n  init(),\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals(console.log);\r\n\r\ndocument.addEventListener(\"load\", () => serviceWorker.register());\r\n\r\n"],"sourceRoot":""}